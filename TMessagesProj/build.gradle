apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

repositories {
    mavenCentral()
    google()
    jcenter()
}

configurations {
    compile.exclude module: 'support-v4'
}

dependencies {

    implementation 'androidx.core:core:1.3.0-alpha02'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.1.0'

    compileOnly 'org.checkerframework:checker-qual:2.8.1'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.osmdroid:osmdroid-android:6.1.5'
    implementation 'com.google.zxing:core:3.3.0'
    implementation files('libs/libv2ray.aar')
    implementation 'com.squareup.okhttp3:okhttp:4.4.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.70"

}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    ndkVersion "21.0.6113669"

    defaultConfig.applicationId = "nekox.messager"

    sourceSets.main {
        jniLibs.srcDir 'jniLibs'
        jni.srcDirs = ['./jni/']
    }

    externalNativeBuild {
        ndkBuild {
            path "jni/Android.mk"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    dexOptions {
        jumboMode = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    signingConfigs {
        def keystorePwd = null
        def alias = null
        def pwd = null
        if (project.rootProject.file('local.properties').exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            keystorePwd = properties.getProperty("KEYSTORE_PASS")
            alias = properties.getProperty("ALIAS_NAME")
            pwd = properties.getProperty("ALIAS_PASS")
        }
        release {
            storeFile project.rootProject.file('keystore.jks')
            storePassword keystorePwd != null ? keystorePwd : System.getenv("KEYSTORE_PASS")
            keyAlias alias != null ? alias : System.getenv("ALIAS_NAME")
            keyPassword pwd != null ? pwd : System.getenv("ALIAS_PASS")
        }
        debug {
            storeFile project.rootProject.file('keystore.jks')
            storePassword keystorePwd != null ? keystorePwd : System.getenv("KEYSTORE_PASS")
            keyAlias alias != null ? alias : System.getenv("ALIAS_NAME")
            keyPassword pwd != null ? pwd : System.getenv("ALIAS_PASS")
        }
    }


    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
           // applicationIdSuffix ".beta"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debugMultidex {
            initWith debug
            minifyEnabled false
            multiDexEnabled true
            dependencies {
                implementation 'com.android.support:multidex:1.0.3'
            }
            manifestPlaceholders = [applicationClassName: "MultiDexApplicationLoader"]
        }

        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            multiDexEnabled true
            dependencies {
                implementation 'com.android.support:multidex:1.0.3'
            }
            manifestPlaceholders = [applicationClassName: "MultiDexApplicationLoader"]
        }
    }

    flavorDimensions "minApi"

    productFlavors {
        armv7 {
            ndk {
                abiFilters "armeabi-v7a"
            }
        }
        x86 {
            ndk {
                abiFilters "x86"
            }
        }
        armv7_SDK21 {
            ndk {
                abiFilters "armeabi-v7a"
            }
            minSdkVersion 21
        }
        x86_SDK21 {
            ndk {
                abiFilters "x86"
            }
            minSdkVersion 21
        }
        armv7_SDK23 {
            ndk {
                abiFilters "armeabi-v7a"
            }
            minSdkVersion 23
        }
        x86_SDK23 {
            ndk {
                abiFilters "x86"
            }
            minSdkVersion 23
        }
        arm64 {
            ndk {
                abiFilters "arm64-v8a"
            }
        }
        x64 {
            ndk {
                abiFilters "x86_64"
            }
        }
        arm64_SDK21 {
            ndk {
                abiFilters "arm64-v8a"
            }
            minSdkVersion 21
        }
        x64_SDK21 {
            ndk {
                abiFilters "x86_64"
            }
            minSdkVersion 21
        }
        arm64_SDK23 {
            ndk {
                abiFilters "arm64-v8a"
            }
            minSdkVersion 23
        }
        x64_SDK23 {
            ndk {
                abiFilters "x86_64"
            }
            minSdkVersion 23
        }

        afat {
        }

    }

    defaultConfig.versionCode = 1

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "NekoX-${defaultConfig.versionName}-${defaultConfig.versionCode}-${variant.productFlavors.get(0).name}-${buildType.name}.apk"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("afat")) {
            setIgnore(true)
        }
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionName "5.15.0.27"

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        def appId = null
        def appHash = null

        //obtain your own keys at https://core.telegram.org/api/obtaining_api_id

        if (project.rootProject.file('local.properties').exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            appId = properties.getProperty("TELEGRAM_APP_ID")
            appHash = properties.getProperty("TELEGRAM_APP_HASH")
        }

        buildConfigField 'int', 'APP_ID', appId != null ? appId : System.getenv("TELEGRAM_APP_ID")
        buildConfigField 'String', 'APP_HASH', "\"" + (appHash != null ? appHash : System.getenv("TELEGRAM_APP_HASH")) + "\""

        externalNativeBuild {
            ndkBuild {
                arguments "NDK_APPLICATION_MK:=jni/Application.mk", "APP_PLATFORM:=android-16", "--jobs=8"
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }

        manifestPlaceholders = [applicationClassName: "ApplicationLoader"]
    }
}